model{
####################################################
#### Distance sampling half normal detection function; 
## Data; 

# y <- vector with distances to transect line; 
# N_years <- number of years
# N_obs <- number of observations
# Year_obs <- vector with year for each observation


# priors for distance model; 

pi <- 3.141593

#random year effect for distance sampling model; 
## Priors for hyper-parameters
mu.dd ~ dunif(0,3)
tau.dd <- pow(sigma.dd, -2)
sigma.dd ~ dunif(0, 10)

for(t in 1:N_years){
  eps.dd[t] ~dnorm(0, tau.dd) 
}



########################################################
for(t in 1:N_years){
  sigma[t] <- mu.dd + eps.dd[t]
  sigma2[t] <- sigma[t]*sigma[t]
  
  # effective strip width
  esw[t] <- sqrt(pi * sigma2[t] / 2) 
  #f0[t] <- 1/esw[t] #assuming all detected on the line
}

########################################################   
for (i in 1:N_obs){ 
  # LIKELIHOOD
  # using zeros trick
  y[i] ~ dunif(0,W) 
  L.f0[i] <- exp(-y[i]*y[i] / (2*sigma2[Year_obs[i]])) * 1/esw[Year_obs[i]] #y are the distances
  nlogL.f0[i] <-  -log(L.f0[i])
  zeros.dist[i] ~ dpois(nlogL.f0[i])
}

## Hierarchicla node: esw[t]; 
##
###################################################
## Random effects model for R (i.e. )
## Data: 

# R_obs <- vector with number of chicks / obs [0 - 12]
# N_Years <- number of years in time series 
# N_obs <- number of observations 
# Year_obs <- vector with years for each observation. 

## Priors; 
for (t in 1:N_years){
  eps.R[t] ~ dnorm(0, tau.R)
}

mu.R  ~ dunif(-3,3)
tau.R <- pow(sigma.R, -2)
sigma.R ~ dunif(0, 10)

## Likelihood;
for (i in 1:N_obs){
  
  R_obs[i] ~ dpois(R_exp[i])
  # Linear predictor
  R_exp[i] <- exp(mu.R + eps.R[Year_obs[i]])   
}

### Derive annual predictions for R
for (t in 1:N_years){
R_year[t] <- exp(mu.R + eps.R[t])

}

                    
} 

